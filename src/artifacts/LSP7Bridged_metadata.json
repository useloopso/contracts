{
	"compiler": {
		"version": "0.8.22+commit.4fc1097e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "ERC725Y_DataKeysValuesEmptyArray",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC725Y_DataKeysValuesLengthMismatch",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC725Y_MsgValueDisallowed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "storedData",
						"type": "bytes"
					}
				],
				"name": "InvalidExtensionAddress",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "InvalidFunctionSelector",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidInitialization",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP4TokenNameNotEditable",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP4TokenSymbolNotEditable",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "authorizedAmount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "LSP7AmountExceedsAuthorizedAmount",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "LSP7AmountExceedsBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP7CannotSendToSelf",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP7CannotSendWithAddressZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP7CannotUseAddressZeroAsOperator",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP7DecreasedAllowanceBelowZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP7InvalidTransferBatch",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenReceiver",
						"type": "address"
					}
				],
				"name": "LSP7NotifyTokenReceiverContractMissingLSP1Interface",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenReceiver",
						"type": "address"
					}
				],
				"name": "LSP7NotifyTokenReceiverIsEOA",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP7TokenContractCannotHoldValue",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP7TokenOwnerCannotBeOperator",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "functionSelector",
						"type": "bytes4"
					}
				],
				"name": "NoExtensionFoundForFunctionSelector",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotInitializing",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "OperatorAllowanceCannotBeIncreasedFromZero",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "callerAddress",
						"type": "address"
					}
				],
				"name": "OwnableCallerNotTheOwner",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OwnableCannotSetZeroAddressAsOwner",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "operatorNotificationData",
						"type": "bytes"
					}
				],
				"name": "AuthorizedOperator",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "dataKey",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "dataValue",
						"type": "bytes"
					}
				],
				"name": "DataChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "version",
						"type": "uint64"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "notified",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "operatorNotificationData",
						"type": "bytes"
					}
				],
				"name": "RevokedOperator",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "force",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "operatorNotificationData",
						"type": "bytes"
					}
				],
				"name": "authorizeOperator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					}
				],
				"name": "authorizedAmountFor",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "burn",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "subtractedAmount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "operatorNotificationData",
						"type": "bytes"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "dataKey",
						"type": "bytes32"
					}
				],
				"name": "getData",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "dataValue",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "dataKeys",
						"type": "bytes32[]"
					}
				],
				"name": "getDataBatch",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "dataValues",
						"type": "bytes[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					}
				],
				"name": "getOperatorsOf",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "addedAmount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "operatorNotificationData",
						"type": "bytes"
					}
				],
				"name": "increaseAllowance",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name_",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "symbol_",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "newOwner_",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "force",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "mint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "notify",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "operatorNotificationData",
						"type": "bytes"
					}
				],
				"name": "revokeOperator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "dataKey",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "dataValue",
						"type": "bytes"
					}
				],
				"name": "setData",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "dataKeys",
						"type": "bytes32[]"
					},
					{
						"internalType": "bytes[]",
						"name": "dataValues",
						"type": "bytes[]"
					}
				],
				"name": "setDataBatch",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "force",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "transfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "from",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "to",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amount",
						"type": "uint256[]"
					},
					{
						"internalType": "bool[]",
						"name": "force",
						"type": "bool[]"
					},
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "transferBatch",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"errors": {
				"ERC725Y_DataKeysValuesEmptyArray()": [
					{
						"details": "Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."
					}
				],
				"ERC725Y_DataKeysValuesLengthMismatch()": [
					{
						"details": "Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."
					}
				],
				"ERC725Y_MsgValueDisallowed()": [
					{
						"details": "Reverts when sending value to the {setData} or {setDataBatch} function."
					}
				],
				"InvalidExtensionAddress(bytes)": [
					{
						"details": "reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)"
					}
				],
				"InvalidFunctionSelector(bytes)": [
					{
						"details": "reverts when the contract is called with a function selector not valid (less than 4 bytes of data)"
					}
				],
				"InvalidInitialization()": [
					{
						"details": "The contract is already initialized."
					}
				],
				"LSP4TokenNameNotEditable()": [
					{
						"details": "Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed. The `LSP4TokenName` data key is located inside the ERC725Y Data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed."
					}
				],
				"LSP4TokenSymbolNotEditable()": [
					{
						"details": "Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed. The `LSP4TokenSymbol` data key is located inside the ERC725Y Data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed."
					}
				],
				"LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)": [
					{
						"details": "reverts when `operator` of `tokenOwner` send an `amount` of tokens larger than the `authorizedAmount`."
					}
				],
				"LSP7AmountExceedsBalance(uint256,address,uint256)": [
					{
						"details": "reverts when sending an `amount` of tokens larger than the current `balance` of the `tokenOwner`."
					}
				],
				"LSP7CannotSendToSelf()": [
					{
						"details": "reverts when specifying the same address for `from` or `to` in a token transfer."
					}
				],
				"LSP7CannotSendWithAddressZero()": [
					{
						"details": "reverts when trying to: - mint tokens to the zero address. - burn tokens from the zero address. - transfer tokens from or to the zero address."
					}
				],
				"LSP7CannotUseAddressZeroAsOperator()": [
					{
						"details": "reverts when trying to set the zero address as an operator."
					}
				],
				"LSP7DecreasedAllowanceBelowZero()": [
					{
						"details": "Reverts when trying to decrease an operator's allowance to more than its current allowance."
					}
				],
				"LSP7InvalidTransferBatch()": [
					{
						"details": "reverts when the array parameters used in {transferBatch} have different lengths."
					}
				],
				"LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)": [
					{
						"details": "reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool force` set as `false`."
					}
				],
				"LSP7NotifyTokenReceiverIsEOA(address)": [
					{
						"details": "reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`."
					}
				],
				"LSP7TokenContractCannotHoldValue()": [
					{
						"details": "Error occurs when sending native tokens to the LSP7 contract without sending any data. E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension."
					}
				],
				"LSP7TokenOwnerCannotBeOperator()": [
					{
						"details": "reverts when trying to authorize or revoke the token's owner as an operator."
					}
				],
				"NoExtensionFoundForFunctionSelector(bytes4)": [
					{
						"details": "reverts when there is no extension for the function selector being called with"
					}
				],
				"NotInitializing()": [
					{
						"details": "The contract is not initializing."
					}
				],
				"OperatorAllowanceCannotBeIncreasedFromZero(address)": [
					{
						"details": "Reverts when token owner call {increaseAllowance} for an operator that does not have any allowance"
					}
				],
				"OwnableCallerNotTheOwner(address)": [
					{
						"details": "Reverts when only the owner is allowed to call the function.",
						"params": {
							"callerAddress": "The address that tried to make the call."
						}
					}
				],
				"OwnableCannotSetZeroAddressAsOwner()": [
					{
						"details": "Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."
					}
				]
			},
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
				},
				"AuthorizedOperator(address,address,uint256,bytes)": {
					"details": "Emitted when `tokenOwner` enables `operator` for `amount` tokens.",
					"params": {
						"amount": "The amount of tokens `operator` address has access to from `tokenOwner`",
						"operator": "The address authorized as an operator",
						"operatorNotificationData": "The data to notify the operator about via LSP1.",
						"tokenOwner": "The token owner"
					}
				},
				"DataChanged(bytes32,bytes)": {
					"details": "Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.",
					"params": {
						"dataKey": "The data key for which a bytes value is set.",
						"dataValue": "The value to set for the given data key."
					}
				},
				"Initialized(uint64)": {
					"details": "Triggered when the contract has been initialized or reinitialized."
				},
				"RevokedOperator(address,address,bool,bytes)": {
					"details": "Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.",
					"params": {
						"notified": "Bool indicating whether the operator has been notified or not",
						"operator": "The address revoked from operating",
						"operatorNotificationData": "The data to notify the operator about via LSP1.",
						"tokenOwner": "The token owner"
					}
				},
				"Transfer(address,address,address,uint256,bool,bytes)": {
					"details": "Emitted when the `from` transferred successfully `amount` of tokens to `to`.",
					"params": {
						"amount": "The amount of tokens transferred.",
						"data": "Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.",
						"force": "if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.",
						"from": "The address which tokens were sent from (balance decreased by `-amount`).",
						"operator": "The address of the operator that executed the transfer.",
						"to": "The address that received the tokens (balance increased by `+amount`)."
					}
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
				}
			},
			"kind": "dev",
			"methods": {
				"allowance(address,address)": {
					"details": "Function to get operator allowance allowed to spend on behalf of `tokenOwner` from the ERC20 standard interface.",
					"params": {
						"operator": "The address approved by the `tokenOwner`",
						"tokenOwner": "The address of the token owner"
					},
					"returns": {
						"_0": "The amount `operator` is approved by `tokenOwner`"
					}
				},
				"approve(address,uint256)": {
					"details": "Approval function from th ERC20 standard interface.",
					"params": {
						"amount": "The amount to approve.",
						"operator": "The address to approve for `amount`"
					},
					"returns": {
						"_0": "`true` on successful approval."
					}
				},
				"authorizeOperator(address,uint256,bytes)": {
					"custom:danger": "To avoid front-running and Allowance Double-Spend Exploit when increasing or decreasing the authorized amount of an operator, it is advised to:     1. either call {revokeOperator} first, and then re-call {authorizeOperator} with the new amount.     2. or use the non-standard functions {increaseAllowance} or {decreaseAllowance}. For more information, see: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/",
					"details": "Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}. Notify the operator based on the LSP1-UniversalReceiver standard",
					"params": {
						"amount": "The allowance amount of tokens operator has access to.",
						"operator": "The address to authorize as an operator.",
						"operatorNotificationData": "The data to notify the operator about via LSP1."
					}
				},
				"authorizedAmountFor(address,address)": {
					"details": "Get the amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners.",
					"params": {
						"operator": "The operator's address to query the authorized amount for.",
						"tokenOwner": "The token owner that `operator` has allowance on."
					},
					"returns": {
						"_0": "The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance."
					}
				},
				"balanceOf(address)": {
					"details": "Get the number of tokens owned by `tokenOwner`. If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided by 1e18 to get a better picture of the actual balance of the `tokenOwner`. _Example:_ ``` balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens ```",
					"params": {
						"tokenOwner": "The address of the token holder to query the balance for."
					},
					"returns": {
						"_0": "The amount of tokens owned by `tokenOwner`."
					}
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation. If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.",
					"returns": {
						"_0": "the number of decimals. If `0` is returned, the asset is non-divisible."
					}
				},
				"decreaseAllowance(address,uint256,bytes)": {
					"details": "Atomically decreases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard",
					"params": {
						"operator": "The operator to decrease allowance for `msg.sender`",
						"subtractedAmount": "The amount to decrease by in the operator's allowance."
					}
				},
				"getData(bytes32)": {
					"details": "Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.",
					"params": {
						"dataKey": "The data key for which to retrieve the value."
					},
					"returns": {
						"dataValue": "The bytes value stored under the specified data key."
					}
				},
				"getDataBatch(bytes32[])": {
					"details": "Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.",
					"params": {
						"dataKeys": "The array of keys which values to retrieve"
					},
					"returns": {
						"dataValues": "The array of data stored at multiple keys"
					}
				},
				"getOperatorsOf(address)": {
					"details": "Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.",
					"params": {
						"tokenOwner": "The token owner to get the operators for."
					},
					"returns": {
						"_0": "An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`."
					}
				},
				"increaseAllowance(address,uint256,bytes)": {
					"details": "Atomically increases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard",
					"params": {
						"addedAmount": "The additional amount to add on top of the current operator's allowance",
						"operator": "The operator to increase the allowance for `msg.sender`"
					}
				},
				"initialize(string,string,address)": {
					"params": {
						"name_": "The name of the token.",
						"newOwner_": "The owner of the token contract.",
						"symbol_": "The symbol of the token."
					}
				},
				"mint(address,uint256,bool,bytes)": {
					"details": "Public {_mint} function only callable by the {owner}."
				},
				"name()": {
					"details": "Returns the name of the token. For compatibility with clients & tools that expect ERC20.",
					"returns": {
						"_0": "The name of the token"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"revokeOperator(address,bool,bytes)": {
					"details": "Removes the `operator` address as an operator of callers tokens, disallowing it to send any amount of tokens on behalf of the token owner (the caller of the function `msg.sender`). See also {authorizedAmountFor}.",
					"params": {
						"notify": "Boolean indicating whether to notify the operator or not.",
						"operator": "The address to revoke as an operator.",
						"operatorNotificationData": "The data to notify the operator about via LSP1."
					}
				},
				"setData(bytes32,bytes)": {
					"custom:events": "{DataChanged} event.",
					"custom:requirements": "- SHOULD only be callable by the {owner}.",
					"custom:warning": "**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.",
					"details": "Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.",
					"params": {
						"dataKey": "The data key for which to set a new value.",
						"dataValue": "The new bytes value to set."
					}
				},
				"setDataBatch(bytes32[],bytes[])": {
					"custom:events": "{DataChanged} event **for each data key/value pair set**.",
					"custom:requirements": "- SHOULD only be callable by the {owner} of the contract.",
					"custom:warning": "**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.",
					"details": "Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.",
					"params": {
						"dataKeys": "An array of data keys to set bytes values for.",
						"dataValues": "An array of bytes values to set for each `dataKeys`."
					}
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"symbol()": {
					"details": "Returns the symbol of the token, usually a shorter version of the name. For compatibility with clients & tools that expect ERC20.",
					"returns": {
						"_0": "The symbol of the token"
					}
				},
				"totalSupply()": {
					"details": "Returns the number of existing tokens that have been minted in this contract.",
					"returns": {
						"_0": "The number of existing tokens."
					}
				},
				"transfer(address,address,uint256,bool,bytes)": {
					"details": "Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function. If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer has been completed (See {authorizedAmountFor}).",
					"params": {
						"amount": "The amount of tokens to transfer.",
						"data": "Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.",
						"force": "When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.",
						"from": "The sender address.",
						"to": "The recipient address."
					}
				},
				"transfer(address,uint256)": {
					"custom:info": "This function uses the `force` parameter as `true` so that EOA and any contract can receive tokens.",
					"details": "Transfer function from the ERC20 standard interface.",
					"params": {
						"amount": "The amount of tokens to transfer.",
						"to": "The address receiving tokens."
					},
					"returns": {
						"_0": "`true` on successful transfer."
					}
				},
				"transferBatch(address[],address[],uint256[],bool[],bytes[])": {
					"details": "Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.",
					"params": {
						"amount": "An array of amount of tokens to transfer for each `from -> to` transfer.",
						"data": "An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.",
						"force": "For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.",
						"from": "An array of sending addresses.",
						"to": "An array of receiving addresses."
					}
				},
				"transferFrom(address,address,uint256)": {
					"custom:info": "This function uses the `force` parameter as `true` so that EOA and any contract can receive tokens.",
					"details": "Transfer functions for operators from the ERC20 standard interface.",
					"params": {
						"amount": "The amount of tokens to transfer.",
						"from": "The address sending tokens.",
						"to": "The address receiving tokens."
					},
					"returns": {
						"_0": "`true` on successful transfer."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"errors": {
				"LSP7TokenContractCannotHoldValue()": [
					{
						"notice": "LSP7 contract cannot receive native tokens."
					}
				]
			},
			"events": {
				"DataChanged(bytes32,bytes)": {
					"notice": "The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."
				}
			},
			"kind": "user",
			"methods": {
				"decreaseAllowance(address,uint256,bytes)": {
					"notice": "Decrease the allowance of `operator` by -`subtractedAmount`"
				},
				"getData(bytes32)": {
					"notice": "Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."
				},
				"getDataBatch(bytes32[])": {
					"notice": "Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."
				},
				"increaseAllowance(address,uint256,bytes)": {
					"notice": "Increase the allowance of `operator` by +`addedAmount`"
				},
				"initialize(string,string,address)": {
					"notice": "Initializing a `LSP7CompatibleERC20MintableInit` token contract with: token name = `name_`, token symbol = `symbol_`, and address `newOwner_` as the token contract owner."
				},
				"setData(bytes32,bytes)": {
					"notice": "Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."
				},
				"setDataBatch(bytes32[],bytes[])": {
					"notice": "Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/LSP7Bridged.sol": "LSP7Bridged"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [
			":@lukso/=lib/lukso-foundry/src/",
			":@openzeppelin-contracts-upgradeable/=lib/lukso-foundry/lib/openzeppelin-contracts-upgradeable/contracts/",
			":@openzeppelin/=lib/openzeppelin-contracts/",
			":ds-test/=lib/forge-std/lib/ds-test/src/",
			":forge-std/=lib/forge-std/src/"
		]
	},
	"sources": {
		"lib/lukso-foundry/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
			"keccak256": "0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b",
			"license": "MIT",
			"urls": [
				"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609",
				"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM"
			]
		},
		"lib/lukso-foundry/src/ERC725/ERC725YCore.sol": {
			"keccak256": "0x05b47d7b46211af80ea52164425e6d31f4cdc869700a2081d875ef3739576f63",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://f55d5ddc7a261f11a4cbe60066be26fad13c9cbab96f1816c57debdd5ceaa35c",
				"dweb:/ipfs/QmYhT9mewkCnv3iNBKVGwVDVqYjnYBfVrDgwSj4v1TJTAn"
			]
		},
		"lib/lukso-foundry/src/ERC725/ERC725YInitAbstract.sol": {
			"keccak256": "0xf1b72567ce9042b6ec648fea8b0b7cb9803e107fa41cb702112c42caed4099a9",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://9255a1d878fa5fe870a03242c018c3a93b57817420c8847d0449dcbc070b8b76",
				"dweb:/ipfs/QmdbJDmHvfFiEZkiQRR8ae4GhmwSRvxYeG7WnUhWTmTMBZ"
			]
		},
		"lib/lukso-foundry/src/ERC725/constants.sol": {
			"keccak256": "0x9afea6f5a327e8ece07613c26757a37443510b01219ed35602abd52b5afb438f",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://894ee0d003e41f244aeb497ff36a7c3b8a9dd9692350e49d5db0f0640da1b997",
				"dweb:/ipfs/QmNhoy4FuiMuCCNmHFWGR33arHY8BQyRkKiM55xiBXjxZb"
			]
		},
		"lib/lukso-foundry/src/ERC725/custom/OwnableUnset.sol": {
			"keccak256": "0xb7cf830b54f8571b3c2d267d64c4bf514f1fc2744a5060528b5ee9184b07306b",
			"license": "MIT",
			"urls": [
				"bzz-raw://ac918a1055a08880eae6e5fe9eeab8c692d58ef72534ba22c308e42a4a00ebcf",
				"dweb:/ipfs/QmcaEPPoxiUXbwymurK6ZJwUPGgEyz7J4HEmVrcGJPvmnQ"
			]
		},
		"lib/lukso-foundry/src/ERC725/errors.sol": {
			"keccak256": "0xbb58894e6843c8fa54e1d2885c4967663360f47107985d83ad502f7dfc63a568",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://d00e92cc91c2fba1b3cd077b556a4171fcc6c77ab2cf15e084d1638afb1ef1b6",
				"dweb:/ipfs/QmUEydU3D2LU5J14QoGGzU6P8n7PwR2s87VEA2qWWnkYLQ"
			]
		},
		"lib/lukso-foundry/src/ERC725/interfaces/IERC725Y.sol": {
			"keccak256": "0xcaceed955485ddb773cf89da15a6af79a9606e20db8a5ad0a9012a61186cc0c3",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://f82149c49125ebad21b340229cfb33119369fd8d600f06a3532c0748fe6e85e8",
				"dweb:/ipfs/Qme7y5HbY1mDge1cm2RhRDHb75d2RtCE7TJeJzdaAuiTZ3"
			]
		},
		"lib/lukso-foundry/src/LSP1/ILSP1UniversalReceiver.sol": {
			"keccak256": "0xfb3fcb4f2a7ddab4f29e2163ebf76f526fcee6c9cd8a87092688e3ec234c4af9",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://53309dcb1d8e57183ab444279f43fb60eab49f92cd431412401bfc72200fba0b",
				"dweb:/ipfs/QmfCaV74Nh4S3na1oPtTDuWjcSsJpFoPhvfn1swHhQ3DRr"
			]
		},
		"lib/lukso-foundry/src/LSP1/LSP1Constants.sol": {
			"keccak256": "0xa2924f64e41a515a9fc4245b0af52d693fdc9312d6814288b5b711b55bc6f005",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://0062bdb354e810af172d37fbc7a398f7885788bc91ec1bbd98d52546433fd0d1",
				"dweb:/ipfs/QmYyMDaSjpohGHLV9CxUGc52sAMFkEBmDdXgWr5hnDAA2k"
			]
		},
		"lib/lukso-foundry/src/LSP1/LSP1Utils.sol": {
			"keccak256": "0xd5f12b6d7117bc53d9320f48381c64267d9f7871e186606a9e44c4bd363c3517",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://27dcab2a4345491bd9d50303c37d0b652a252caccc90c145e87390c3fde27caf",
				"dweb:/ipfs/QmQxfvKGFjMUPBYVgqJA1kHjWeJo6kWGtzWzQJNeoaLP2V"
			]
		},
		"lib/lukso-foundry/src/LSP17/LSP17Constants.sol": {
			"keccak256": "0xa34118ff863a8faff830b016329fd80265142f7191530bb21344e50a7846f2c2",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://cd0116f0ffc53d769c51d8581a572ea2ec5dc92f31823b542c6d246e68dbc360",
				"dweb:/ipfs/QmSoAvbh8Vi56giuBjQtaEFTC6c5kjbzmmun3VfoGapKtR"
			]
		},
		"lib/lukso-foundry/src/LSP17/LSP17Errors.sol": {
			"keccak256": "0xbd53b87a3240bea2cca424835a8c4b1a1b1c9eb90caa525bf1cd3748528afca6",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://078ef7696d736e6f6fcaf3901dbbe6449e0512b775725051e89e932a5e486da3",
				"dweb:/ipfs/QmeCx452QirbwnoBnGJERFUuEZiQtZbBW7EGxamiMNEGs8"
			]
		},
		"lib/lukso-foundry/src/LSP17/LSP17Extendable.sol": {
			"keccak256": "0xddeb04c4af76a0e08df92467c4291c0f617545dd00243d7d4e6d647c5024f022",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://cc621d391c1f867f197bcaefd9252a4163547e6e6ab209e17f0f3699cc6a0e3a",
				"dweb:/ipfs/QmbqAondK5AvsxHhNJQ4wyzChmrk6fxbXVnKCApJR4N7tg"
			]
		},
		"lib/lukso-foundry/src/LSP2/LSP2Utils.sol": {
			"keccak256": "0xbcdbdabdd59ff21317cc2c1f9d6291705a6b349f93e48050046336bb0f7b2864",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://534452b881670c8c7cf3677ecd866cc76704585eb49a3f562940f94d889df079",
				"dweb:/ipfs/QmYjmr2hzTC9nLg3sQajYCre3EVqP4qqRg1gbcVFnb3jAH"
			]
		},
		"lib/lukso-foundry/src/LSP4/LSP4Constants.sol": {
			"keccak256": "0xcdd82ff6b9cfcafe9560a367c45dc663ae138b8a5b3475035876d4f736bc98b6",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://c24b89cd9b9056649523966a42f2cd8eac082a0ebd4d982f83aa1a65fef9ebda",
				"dweb:/ipfs/QmUvy4BWkTvLsQsCE6ELxJYgVcEXDkhss5MAmBXLuGZwbS"
			]
		},
		"lib/lukso-foundry/src/LSP4/LSP4DigitalAssetMetadataInitAbstract.sol": {
			"keccak256": "0x78a35068578ea44f2182fb7986e2b1258be1a09b564740efc1a5a2ee4ff35bc5",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://945e2d63d7fcfb0fe850b755b814bb75051caae457d2fe8dfd483765b48264f3",
				"dweb:/ipfs/QmVZN6ne6eB8nbCBqXpQDNAu12taZuGWoCm7P3iHm3MnAz"
			]
		},
		"lib/lukso-foundry/src/LSP4/LSP4Errors.sol": {
			"keccak256": "0xe1d0efb2c6248b2cf95034f87b80a389eeb05a906cc45d63ede002de48ab12fe",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://6d77a9f00916788ad7883b775cbe8d2094245a4e891b5a958841fe6543c43365",
				"dweb:/ipfs/QmaZLTqEXTuGguDGAUrnhmjTDtHwXTpQXVYQHssmMSLUfa"
			]
		},
		"lib/lukso-foundry/src/LSP7/ILSP7DigitalAsset.sol": {
			"keccak256": "0xf931e4d30b16e5228df796b275c7364fcfc9e92878e3779d07656bf6405f5cb9",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://e2f0a6423c48ae0cb49bcd0deffffc5e15adf33d81355037be393115d60ab1a8",
				"dweb:/ipfs/QmYeJaRR9VkxkgYaeimw7btB4CC7dtMJnyfqFFras5LH6w"
			]
		},
		"lib/lukso-foundry/src/LSP7/LSP7Constants.sol": {
			"keccak256": "0x3e4f55b24760e33dab158073857da3cb95092c0e4dd565e330292afa87913a0b",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://2bcbd4995543f79192d082a8be5e4c47588348f0ff0e1aee6f824fe65be98bba",
				"dweb:/ipfs/QmXSnC3Dhn7FkfoG3HKejophPBxHP5VNAkhxjJZeCo2REw"
			]
		},
		"lib/lukso-foundry/src/LSP7/LSP7DigitalAssetCore.sol": {
			"keccak256": "0x89dc1ae3fd8fab1d2c23c7914dd21e4b712151917edf6594053dcb963e5ad3bb",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://2b67f8379ff82d0eda3111787ee99508ee1be08af69b67d57de6b2f2c666721b",
				"dweb:/ipfs/QmeNV9Lqa9iVttDaD6zppKETEp87fAM557c26Z617TFhsF"
			]
		},
		"lib/lukso-foundry/src/LSP7/LSP7DigitalAssetInitAbstract.sol": {
			"keccak256": "0x53c039aafbcaf1127a695cae5dd62fa1a25e76cba42191654b3c243c41ea1af8",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://643bdd1322be2c3c3bcc1ab94eb26b5523a9d7e706f807dbfc666c04d19310d2",
				"dweb:/ipfs/QmZzpD7Kg1zsPLyqkjEKDABR3uMjcXg8FaFD8GzpKuWYZg"
			]
		},
		"lib/lukso-foundry/src/LSP7/LSP7Errors.sol": {
			"keccak256": "0xd835a6aa1d55c56d55423b426fd0d5714abe18f8997b18b9618f698a7833506c",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://bc6855724b6d88367a27b331570c8673c126f6b3fdd7a4eae5b66b7172e2abe3",
				"dweb:/ipfs/QmaJQFAZwMqM6wKfz2MakHtJwjd9ueiZHZn6qzyZxEG6wf"
			]
		},
		"lib/lukso-foundry/src/LSP7/extensions/LSP7CompatibleERC20InitAbstract.sol": {
			"keccak256": "0x9fe5d88db6ec676e4cfabc90ae516a9881e1f01918ed620c20978d9e7b9852b0",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://6ce9ff1aea5c252a325d144a96a7669260773f03725e20f9b470a852197f90a4",
				"dweb:/ipfs/QmUsyPVPHpTxZKXLYSb4vihzTRa9dQEweKL5tx7bMpR8vK"
			]
		},
		"lib/lukso-foundry/src/LSP7/presets/LSP7CompatibleERC20MintableInit.sol": {
			"keccak256": "0x86001a80d0b824b23c793eb5c5bdbe63e97fc407443e58b3b1b285484d960644",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://55734b28ea9c60d5e3000aac17f1ab3f6c40ff42b0bb32bc6c99881da877f123",
				"dweb:/ipfs/QmaDqXVNSq6X67W6hdPuHdQedGwqAifJ8izKWhyhRU16T4"
			]
		},
		"lib/lukso-foundry/src/LSP7/presets/LSP7CompatibleERC20MintableInitAbstract.sol": {
			"keccak256": "0x2c90ef00fb3e1b544b5d60cb449c063a8bc271cacb5c7fe5577de4a0af385155",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://10b9a3174dfa51a84e2286877ad41ee3597960cab0e463110ad51e63a598ba3d",
				"dweb:/ipfs/QmexreDYA8UXpk8rPsoRUny5Z9k3HHGHktXVYd6zn3mPkT"
			]
		},
		"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850",
				"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133",
			"license": "MIT",
			"urls": [
				"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8",
				"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol": {
			"keccak256": "0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a",
			"license": "MIT",
			"urls": [
				"bzz-raw://1d7b235b578347dce2d831a76f122e820a7db7e73fd2e47f13bafdcd61c5b066",
				"dweb:/ipfs/QmVAELwambfJa55HfiCoz1kFFh7iYwRYeW5x8si6AFM4iX"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
			"license": "MIT",
			"urls": [
				"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
				"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
			"keccak256": "0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa",
			"license": "MIT",
			"urls": [
				"bzz-raw://ad85dd393ee0a1917c57046abc5155f51f77844b2c6a42c05c1b8dd26d6ff3c1",
				"dweb:/ipfs/QmNqYc8To2NdnpP6E1tGz7t6A7beuENde5yovwov5pW1fA"
			]
		},
		"solidity-bytes-utils/contracts/BytesLib.sol": {
			"keccak256": "0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://ca16cef8b94f3ac75d376489a668618f6c4595a906b939d674a883f4bf426014",
				"dweb:/ipfs/QmceGU7qhyFLSejaj6i4dEtMzXDCSF3aYDtW1UeKjXQaRn"
			]
		},
		"src/LSP7Bridged.sol": {
			"keccak256": "0x49f96c4bb819ce72964056546c1bb75120667d461ae1b34f9aac1f71d8c2188d",
			"license": "MIT",
			"urls": [
				"bzz-raw://e6c65832d75c6177c264b0aa6bb6ddcf1cab697f1ee0d7c25020f8ceb2fd70a9",
				"dweb:/ipfs/QmdohEQTkd7oe8fKUbxRxnpvexC8SRMAvgKPagbKZjnmP5"
			]
		}
	},
	"version": 1
}